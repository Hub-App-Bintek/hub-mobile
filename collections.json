{
  "info": {
    "name": "Hub API v2.1",
    "description": "Comprehensive Postman collection for Hub API v2.1 with JWT authentication, file operations, user management, and backoffice features. Includes environment variables, pre-request scripts, test scripts, and example requests with sample data.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "hub-backend"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string",
      "description": "JWT access token for authentication"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "User ID for operations"
    },
    {
      "key": "file_id",
      "value": "",
      "type": "string",
      "description": "File ID for download operations"
    },
    {
      "key": "consultant_id",
      "value": "",
      "type": "string",
      "description": "Consultant ID for backoffice operations"
    },
    {
      "key": "email",
      "value": "test@example.com",
      "type": "string",
      "description": "Test email for registration and login"
    },
    {
      "key": "password",
      "value": "password123",
      "type": "string",
      "description": "Test password"
    },
    {
      "key": "activation_token",
      "value": "",
      "type": "string",
      "description": "Activation token for account activation"
    },
    {
      "key": "portfolio_id",
      "value": "",
      "type": "string",
      "description": "Portfolio ID for operations"
    },
    {
      "key": "project_id",
      "value": "",
      "type": "string",
      "description": "Project ID for operations"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints including registration, OTP verification, login, and profile updates",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"confirmPassword\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user and send OTP for verification."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.text();",
                  "    pm.expect(jsonData).to.include('OTP sent');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Verify OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"otpCode\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/verify-otp",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "verify-otp"]
            },
            "description": "Verify OTP code sent to user's email."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1'); // Default for testing",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.text();",
                  "    pm.expect(jsonData).to.include('verified successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Authenticate user and obtain JWT token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains access token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "    pm.collectionVariables.set('jwt_token', jsonData.accessToken);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "John Doe",
                  "type": "text"
                },
                {
                  "key": "phone",
                  "value": "+1234567890",
                  "type": "text"
                },
                {
                  "key": "address",
                  "value": "123 Main St",
                  "type": "text"
                },
                {
                  "key": "ktpNumber",
                  "value": "1234567890123456",
                  "type": "text"
                },
                {
                  "key": "ktpFile",
                  "src": [],
                  "type": "file",
                  "description": "KTP image file (JPEG/PNG, max 5MB)"
                },
                {
                  "key": "selfieFile",
                  "src": [],
                  "type": "file",
                  "description": "Selfie image file (JPEG/PNG, max 5MB)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/auth/profile-update",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "profile-update"]
            },
            "description": "Update user profile with optional image uploads. Requires JWT authentication."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    const jsonData = pm.response.text();",
                  "    pm.expect(jsonData).to.include('Profile updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Activate Account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"token\": \"{{activation_token}}\",\n  \"password\": \"{{password}}\",\n  \"confirmPassword\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/activate-account",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "activate-account"]
            },
            "description": "Activate user account using activation token."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.text();",
                  "    pm.expect(jsonData).to.include('Account activated successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Resend Activation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "{{email}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/auth/resend-activation",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "resend-activation"]
            },
            "description": "Resend activation email to user."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const jsonData = pm.response.text();",
                  "    pm.expect(jsonData).to.include('Activation email resent successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Files",
      "description": "File upload and download operations with MinIO storage",
      "item": [
        {
          "name": "Upload File",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "src": [],
                  "type": "file",
                  "description": "File to upload (JPEG/PNG, max 5MB)"
                },
                {
                  "key": "fileType",
                  "value": "Document",
                  "type": "text",
                  "description": "File type: KTP, Document, or Selfie"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/files/upload",
              "host": ["{{base_url}}"],
              "path": ["api", "files", "upload"]
            },
            "description": "Upload a file with validation and secure storage."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains file information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('fileId');",
                  "    pm.expect(jsonData).to.have.property('fileUrl');",
                  "    pm.expect(jsonData).to.have.property('checksum');",
                  "    pm.collectionVariables.set('file_id', jsonData.fileId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Download File",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/files/download/{{file_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "files", "download", "{{file_id}}"]
            },
            "description": "Download a file by ID."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('file_id')) {",
                  "    throw new Error('File ID not available. Please upload a file first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has content type header\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.match(/image\\/(jpeg|png)/);",
                  "});",
                  "",
                  "pm.test(\"Response has content disposition header\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "description": "User management endpoints for admin operations",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Retrieve list of all users."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Approve User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/approve",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}", "approve"]
            },
            "description": "Approve a user account."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Reject User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/reject",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}", "reject"]
            },
            "description": "Reject a user account."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Activate User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/activate",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}", "activate"]
            },
            "description": "Activate a user account."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Deactivate User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/deactivate",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}", "deactivate"]
            },
            "description": "Deactivate a user account."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Self Deactivate User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}/self-deactivate",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}", "self-deactivate"]
            },
            "description": "Allow user to self-deactivate their account."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Portfolio",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/portfolio",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "portfolio"]
            },
            "description": "Retrieve user's portfolio information."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains portfolio data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData) {",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('user');",
                  "        pm.collectionVariables.set('portfolio_id', jsonData.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Save Portfolio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bio\": \"Experienced consultant with 5+ years in legal services\",\n  \"specialization\": \"Legal\",\n  \"experience\": \"5 years\",\n  \"education\": \"Law Degree from University X\",\n  \"certifications\": \"Certified Legal Consultant\",\n  \"projectSamples\": \"Various legal consultation projects\",\n  \"linkedinUrl\": \"https://linkedin.com/in/consultant\",\n  \"websiteUrl\": \"https://consultant.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/portfolio",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "portfolio"]
            },
            "description": "Save or update user's portfolio information."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains portfolio data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Completed Portfolios",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/consultants/completed",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "consultants", "completed"]
            },
            "description": "Retrieve list of completed consultant portfolios."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Projects",
      "description": "Project management endpoints for creating, listing, and retrieving project details",
      "item": [
        {
          "name": "Create Project",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Rumah Tinggal\",\n  \"longitude\": 106.84513,\n  \"latitude\": -6.21462,\n  \"locationDetail\": \"Jl. Sudirman No. 10, Jakarta\",\n  \"type\": \"PROTOTYPE\",\n  \"landArea\": 120.5,\n  \"income\": 50000000.0\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/projects",
              "host": ["{{base_url}}"],
              "path": ["api", "projects"]
            },
            "description": "Create a new project with location, type, and financial details."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains project data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('projectId');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('type');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "    pm.collectionVariables.set('project_id', jsonData.projectId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Projects",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects?page=0&size=10&type=PROTOTYPE&status=ACTIVE",
              "host": ["{{base_url}}"],
              "path": ["api", "projects"],
              "query": [
                {
                  "key": "page",
                  "value": "0",
                  "description": "Page number (0-based)"
                },
                {
                  "key": "size",
                  "value": "10",
                  "description": "Page size"
                },
                {
                  "key": "type",
                  "value": "PROTOTYPE",
                  "description": "Filter by project type (PROTOTYPE or NON_PROTOTYPE)"
                },
                {
                  "key": "status",
                  "value": "ACTIVE",
                  "description": "Filter by project status (ACTIVE, COMPLETED, CANCELLED)"
                }
              ]
            },
            "description": "Retrieve list of user's projects with optional pagination and filters."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains projects array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('projects');",
                  "    pm.expect(jsonData.projects).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Project Detail",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/projects/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "projects", "{{project_id}}"]
            },
            "description": "Retrieve detailed information for a specific project."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('project_id')) {",
                  "    throw new Error('Project ID not available. Please create a project first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains project details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('projectId');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('type');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('locationDetail');",
                  "    pm.expect(jsonData).to.have.property('longitude');",
                  "    pm.expect(jsonData).to.have.property('latitude');",
                  "    pm.expect(jsonData).to.have.property('landArea');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Backoffice",
      "description": "Backoffice operations for user management and consultant registration",
      "item": [
        {
          "name": "Get Users for Verification",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/balai/verification-pending",
              "host": ["{{base_url}}"],
              "path": ["api", "balai", "verification-pending"]
            },
            "description": "Retrieve list of users pending verification."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Approve User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/balai/approve/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "balai", "approve", "{{user_id}}"]
            },
            "description": "Approve user via backoffice."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Reject User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/balai/reject/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "balai", "reject", "{{user_id}}"]
            },
            "description": "Reject user via backoffice."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Deactivate User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/balai/deactivate/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "balai", "deactivate", "{{user_id}}"]
            },
            "description": "Deactivate user via backoffice."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}",
                  "if (!pm.collectionVariables.get('user_id')) {",
                  "    pm.collectionVariables.set('user_id', '1');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register Consultant",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Consultant\",\n  \"email\": \"consultant@example.com\",\n  \"phone\": \"+1234567890\",\n  \"university\": \"University X\",\n  \"professional\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/balai/register-consultant",
              "host": ["{{base_url}}"],
              "path": ["api", "balai", "register-consultant"]
            },
            "description": "Register a new consultant."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.collectionVariables.set('consultant_id', jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Bulk Register Consultant",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "src": [],
                  "type": "file",
                  "description": "CSV file containing consultant data"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/balai/register-consultant/bulk",
              "host": ["{{base_url}}"],
              "path": ["api", "balai", "register-consultant", "bulk"]
            },
            "description": "Bulk register consultants from CSV file."
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('jwt_token')) {",
                  "    throw new Error('JWT token not available. Please login first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of users\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script for token validation",
          "const jwtToken = pm.collectionVariables.get('jwt_token');",
          "if (jwtToken) {",
          "    // Check if token is expired (simple check)",
          "    const payload = jwtToken.split('.')[1];",
          "    if (payload) {",
          "        try {",
          "            const decoded = JSON.parse(atob(payload));",
          "            const currentTime = Math.floor(Date.now() / 1000);",
          "            if (decoded.exp && decoded.exp < currentTime) {",
          "                console.log('JWT token expired, please refresh or login again');",
          "            }",
          "        } catch (e) {",
          "            console.log('Error parsing JWT token');",
          "        }",
          "    }",
          "}"
        ]
      }
    }
  ]
}